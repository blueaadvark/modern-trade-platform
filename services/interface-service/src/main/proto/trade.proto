syntax = "proto3";
option java_multiple_files = true;
package com.crd.interfaces.grpc;

message Trade {
    int64 tradeId = 1;
    string tradeDate = 2;
    string tradeCounterparty = 3;
    string tradeNotional = 4;
    string tradeMaturity = 5;
}

// The Trade Service definition.
service TradeService {
    // Get trade By Trade ID
    // IDL of unary RPCs where the client sends a single request to the server and gets a single response back, just like a normal function call.
    rpc getTrade (Trade) returns (Trade) {
    }
    
    // Get all trades by any given name
    // IDL of bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream. The two streams operate independently, so clients and servers can read and write in whatever order they like: for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message, or some other combination of reads and writes. The order of messages in each stream is preserved.
    rpc getAllTradesByIDList (stream Trade) returns (stream Trade) {
    }
    
    // Get trade By Trade ID
    // IDL of client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream. Once the client has finished writing the messages, it waits for the server to read them and return its response. Again gRPC guarantees message ordering within an individual RPC call.
    rpc getLargestTrade (stream Trade) returns (Trade) {
    }
}
